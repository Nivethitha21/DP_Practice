 static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[][] = new int[n][W];
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < W; j++)
                dp[i][j] = -1;
        }
        return helper(W,wt,val,n,dp);
    } 
    static int helper(int W,int wt[], int val[],int n,int dp[][])
    {
        if(W == 0 || n == 0)
            return 0;
        if(dp[n-1][W-1] != -1)
            return dp[n-1][W-1];
        if(wt[n-1] > W)
        {
            int res =  helper(W,wt,val,n-1,dp);
            dp[n-1][W-1] = res;
            return res;
        }
        else
        {
            int res = Math.max(helper(W,wt,val,n-1,dp),val[n-1] + helper(W-wt[n-1],wt,val,n-1,dp));
            dp[n-1][W-1] = res;
            return res;
        }
        }
}

